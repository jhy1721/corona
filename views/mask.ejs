<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Jekyll v3.8.6">
    <title>공적 마스크 위치</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/4.4/examples/cover/"> 
    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <script src="js/jquery-1.11.3.min.js"></script>
    <script src="js/bootstrap.min.js"></script>

    <style>
        .bd-placeholder-img {
          font-size: 1.125rem;
          text-anchor: middle;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
          user-select: none;
        }
  
        @media (min-width: 768px) {
          .bd-placeholder-img-lg {
            font-size: 3.5rem;
          }
        }
      </style>
      <!-- Custom styles for this template -->
      <link href="css/cover.css" rel="stylesheet">
    
</head>
<style>
    <!-- 오버레이 이미지를 나타내기 위한 스타일 작업 원하는 모양으로 변경하여 사용-->
    .customoverlay {position:relative;bottom:85px;border-radius:6px;border: 1px solid #ccc;border-bottom:2px solid #ddd;float:left;}
    .customoverlay:nth-of-type(n) {border:0; box-shadow:0px 1px 2px #888;}
    .customoverlay a {display:block;text-decoration:none;color:#000;text-align:center;border-radius:6px;font-size:14px;font-weight:bold;overflow:hidden;background: #d95050;background: #d95050 url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/arrow_white.png) no-repeat right 14px center;}
    .customoverlay .title {display:block;text-align:center;background:#fff;margin-right:35px;padding:10px 15px;font-size:14px;font-weight:bold;}
    .customoverlay:after {content:'';position:absolute;margin-left:-12px;left:50%;bottom:-12px;width:22px;height:12px;background:url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}
    </style>
<body class="text-center">
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
  <header class="masthead mb-auto">
    <div class="inner">
      <h3 class="masthead-brand">Mask</h3>
      <nav class="nav nav-masthead justify-content-center">
        <a class="nav-link active" href="/">Home</a>
        <a class="nav-link" href="/chart">Chart</a>
        <a class="nav-link" href="/map">Map</a>
        <a class="nav-link" href="/mask">Mask</a>
      </nav>
    </div>
  </header>
  
<div id="map" style="width:100%;height:100%;"></div>
<script type="text/javascript"
    src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=	962612367e0b973fc2af8d224f191bc9"></script>
<script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
<script>
    var mapContainer = document.getElementById('map'), // 지도를 표시할 div  
        mapOption = {
            center: new kakao.maps.LatLng(37.553768, 126.969577), // 지도의 중심좌표 서울역
            level: 3 // 지도의 확대 레벨
        };

    // 지도 객체 생성 URL
    var map = new kakao.maps.Map(mapContainer, mapOption);

    if (navigator.geolocation) {

        // GeoLocation을 이용해서 접속 위치를 얻어옵니다
        navigator.geolocation.getCurrentPosition(function (position) {

            var mylat = position.coords.latitude, // 위도
                mylon = position.coords.longitude; // 경도

            var locPosition = new kakao.maps.LatLng(mylat, mylon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다
                message = '<div style="padding:5px; color:#353535;">현재위치</div>'; // 인포윈도우에 표시될 내용입니다

            // 마커와 인포윈도우를 표시합니다
            displayMarker(locPosition, message);

        })
    };
    function displayMarker(locPosition, message) {

        // 마커를 생성합니다
        var marker_present = new kakao.maps.Marker({
            map: map,
            position: locPosition
        });

        var iwContent = message, // 인포윈도우에 표시할 내용
            iwRemoveable = true;

        // 인포윈도우를 생성합니다
        var infowindow = new kakao.maps.InfoWindow({
            content: iwContent,
            removable: iwRemoveable
        });

        // 인포윈도우를 마커위에 표시합니다 
        infowindow.open(map, marker_present);

        // 지도 중심좌표를 접속위치로 변경합니다
        map.setCenter(locPosition);
    }

    // 마커들을 담을 배열을 만든다.
    var markers = [];
    //오버레이들을 담을 배열을 만든다.
    var overlays = [];
    var selectedoverlay, selectedMarker = null;
    // 지도 드래그 이벤트    
    kakao.maps.event.addListener(map, 'dragend', setMarker());

    // 지도가 처음 생기는 경우 마커를 나타내기 위해 함수를 직접 실행
    window.onload = setMarker();


    // 마커를 나타내는 함수
    function setMarker() {
        //addListener에 넣기 위해서는 return function 타입의 매개변수가 필요
        return function () {
            //그려진 마커를 맵에서 지우는 함수
            removeMarker();
            removeOverlay();

            //맵의 중심점의 위도와 경도를 받아오는 변수
            var lat = map.getCenter().getLat();
            var lng = map.getCenter().getLng();

            //마스크 데이터를 받아오는 URL에 맵의 중심점인 lat, lng를 적용시켜준다.
            var url = "https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=" + lat + "&lng=" + lng + "&m=500";

            //이지지 관련 변수
            // 마커 이미지의 URL
            var imageSrc = "http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png";
            // 마커 이미지의 이미지 크기 입니다
            var imageSize = new kakao.maps.Size(24, 35);
            // 마커 이미지를 생성합니다    
            var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);


            $.ajax({
                url: url,
                dataType: "json", //데이터 타입은 json형태로 받아옵니다.
                success: function (result) {
                    for (var i = 0; i < result.count; i++) {// json 데이터를 분석하며 각 데이터 분석마다 Marker를 찍어줍니다.
                        //console.log('result.stores['+i+'].addr : ' + result.stores[i].addr);
                        //console.log('result.stores['+i+'].code : ' + result.stores[i].code);
                        //console.log('result.stores['+i+'].created_at : ' + result.stores[i].created_at);
                        //console.log('result.stores['+i+'].lat : ' + result.stores[i].lat);
                        //console.log('result.stores['+i+'].lng : ' + result.stores[i].lng);
                        //console.log('result.stores['+i+'].name : ' + result.stores[i].name);
                        //console.log('result.stores['+i+'].remain_stat : ' + result.stores[i].remain_stat);
                        //console.log('result.stores['+i+'].stock_at : ' + result.stores[i].stock_at);
                        //console.log('result.stores['+i+'].type : ' + result.stores[i].type);

                        var marker = new kakao.maps.Marker({//맵에 표현 될 마커들을 표시
                            map: map,
                            position: new kakao.maps.LatLng(result.stores[i].lat, result.stores[i].lng),
                            title: result.stores[i].name,
                            image: markerImage
                        });

                        // 커스텀 오버레이에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다

                        var content = '<div class="customoverlay">' +
                           '  <a href="https://map.kakao.com" target="_blank">' +
                           '    <span class="title">'+ result.stores[i].name +'</span>' +
                           '  </a>' +
                           '</div>';



                        // 커스텀 오버레이가 표시될 위치입니다 
                        var position = new kakao.maps.LatLng(result.stores[i].lat, result.stores[i].lng);

                        // 커스텀 오버레이를 생성합니다
                        var customOverlay = new kakao.maps.CustomOverlay({
                            yAnchor: 2,
                            position: position,
                            content: content
                        });

                        //마커를 배열에 추가한다.
                        kakao.maps.event.addListener(marker, 'click', mouseclick(marker, customOverlay, result.stores[i].name));
                        overlays.push(customOverlay);
                        markers.push(marker);
                    }
                }
            });
        }
    }

    //마커 클릭시 발생하는 함수
    function mouseclick(marker, overlay, name) {
        return function () {

            if (!selectedMarker || selectedMarker !== marker) {
                for (var i = 0; i < overlays.length; i++) {
                    overlays[i].setMap(null);
                }
                overlay.setMap(map);
                selectedoverlay = overlay;
                selectedMarker = marker;
            }
        }
    }

    //그려진 오버레이를 맵에서 없애는 함수
    function removeOverlay() {
        console.log("여기눌러주세요 : " + overlays.length);
        for (var i = 0; i < overlays.length; i++) {
            overlays[i].setMap(null);
        }
        overlays = [];
    }

    //그려진 마커를 맵에서 없애는 함수
    function removeMarker() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers = [];
    }

</script>
</body>
</html>
